#!/usr/bin/env bash
set -eou pipefail

get_state(){
  local query_id="$1"

  local status="$(aws athena \
    --region us-east-1 \
    get-query-execution \
    --query-execution-id "$query_id" | \
    jq '.QueryExecution.Status')"

  local state="$(echo "$status" | jq -r '.State')"

  echo "$state"
}

get_query(){
  local query_id="$1"

  local results=$(aws athena \
    --region us-east-1 \
    get-query-execution \
    --query-execution-id "$query_id" | \
    jq '.QueryExecution.ResultConfiguration.OutputLocation'
  )

  local cmd="aws s3 cp --region us-east-1 $results /tmp/athena/query >/dev/null"

  eval "$cmd" && \
    cat /tmp/athena/query
}

wait_til_finished(){
  local query_id="$1"
  local status="in flux"
  local sleep_sec=4
  local number_of_tries=500 # 500 * 4 / 60 = 33 min timeout
  local sql="$2"
  local retry_failures=('HIVE_CURSOR_ERROR: Unable to execute HTTP request: Too many open files')

  while [[ $status != done ]] && [[ $number_of_tries -ge 1 ]]; do
    local state="$(get_state "$query_id")"

    case "$state" in
      FAILED | CANCELLED )
        local fail_reason="$(aws athena \
          --region us-east-1 \
          get-query-execution \
          --query-execution-id "$query_id" | \
          jq -r '.QueryExecution.Status.StateChangeReason')"

        echo "$fail_reason" >&2

        if [[ ${retry_failures[*]} =~ $fail_reason ]]; then
          echo 'Emphemeral Athena failure, retrying...' >&2
          export -f get_query get_state wait_til_finished query
          exec bash -c "query \"$sql\"" # replaces current process with execve call
        else
          echo 'Athena query failed.' >&2 && exit 1
        fi ;;
      SUCCEEDED )
        status="done"
        get_query "$query_id" ;;
      RUNNING | SUBMITTED )
        sleep "$sleep_sec"
        number_of_tries="$(echo "$number_of_tries - 1" | bc)" ;;
      * ) echo "Athena query state is unknown..: $state ... go tell John" >&2 && exit 1 ;;
    esac
  done

  if [[ $number_of_tries -eq 0 ]]; then echo "Athena query timeout reached; the query may still be running on athena." >&2 && exit 1; fi
}

query(){
  local sql="$1"
  local sql_trimmed="$(sed -e 's/[[:space:]]*$//' <<<${sql})"

  if [[ ! -z $sql_trimmed ]]; then
    athena_query="$(aws athena \
      --region us-east-1 \
      start-query-execution \
      --result-configuration 'OutputLocation=s3://aws-athena-query-results-470340682667-us-east-1/,EncryptionConfiguration={EncryptionOption=SSE_S3}' \
      --output text \
      --query-string "$sql_trimmed")"

    wait_til_finished "$athena_query" "$sql" # $sql passed in only for graceful retries
  fi
}
