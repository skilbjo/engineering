#!/usr/bin/env bash
set -eou pipefail

tmp_dir="$(mkdir -p /tmp/email && echo '/tmp/email')"
distro_list=''
subject=''
body=''
attachment=''
html=''

usage(){
  echo "Usage: email: ${0} [--distribution-list <'distro@list.com>] [--subject <text>]" 1>&2
  echo "                   [--body <text>] [--attachment </path/to/file>] [--html]    " 1>&2
  echo "       --distribution-list, --subject, and --body are required                " 1>&2
  echo "       If using --html, --attachment must be present                          " 1>&2
  echo '       Additionally, ensure $email and Semail_pw are set.                     ' 1>&2
  exit 1
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -d|--distro-list|--distribution-list) distro_list="$2"; shift ;;
    -s|--subject)          subject="$2"; shift ;;
    -b|--body)             body="$2"; shift ;;
    -a|--attachment)       attachment="$2"; shift ;;
    -h|--html)             html='y' ;;
    *) break ;;
  esac
  shift
done
if [[ -z $distro_list ]] || [[ -z $subject ]] || [[ -z $body ]]; then usage; fi
if [[ -n $html ]] && [[ -z $attachment ]]; then usage; fi

email_cleanup(){
  if [[ -d $tmp_dir ]]; then rm -rf "$tmp_dir"; fi
}

csv_to_html(){
  local file="$1"
  local file_name="$(basename "$file" | sed 's/\.[^.]*$//')"

  echo '<table border="2" cellspacing="1" cellpadding="2">'         >"${tmp_dir}/${file_name}"
  local header='true'
  cat "$file" | while read line; do
    if [[ $header == 'true' ]]; then
      echo "<tr><th align='center'>${line//,/</th><th>}</th></tr>" >>"${tmp_dir}/${file_name}";
      header='false';
    else
      echo "<tr><td align='center'>${line//,/</td><td>}</td></tr>" >>"${tmp_dir}/${file_name}";
    fi
  done
  echo '</table>'                                                  >>"${tmp_dir}/${file_name}"

  cat "${tmp_dir}/${file_name}"
}

mutt_setup(){
  if [[ $(whoami) == 'root' ]]; then
    local home_dir='/root'
  elif [[ $(whoami) == 'sbx_'* ]]; then
    local home_dir="/home/$(whoami)"
  elif [[ $(whoami) == 'skilbjo' ]]; then
    echo 'Easy, big guy...' && exit 1
  fi

  local muttrc="set realname  = 'Iris'
set from      = '${email}'
set imap_user = '${email}'
set imap_pass = '${email_pw}'
set smtp_pass = '${email_pw}'
set smtp_url  = 'smtps://"$(echo "$email" | sed 's/@.*//')"@smtp.gmail.com:465/'
set folder    = 'imaps://imap.gmail.com:993'
set spoolfile = '+INBOX'
set postponed = '+[Gmail]/Drafts'
set move      = 'no'
set record    = '+sent'
set copy      = 'no'
set imap_keepalive = 900
set crypt_use_gpgme     = 'no'
set header_cache        = ~/.mutt/cache/headers
set message_cachedir    = ~/.mutt/cache/bodies
set certificate_file    = ~/.mutt/certificates"

  echo "$muttrc" >"${home_dir}/.muttrc"
}

create_mime_email(){
  local distro_list="$1"
  local subject="$2"
  local body="$3"
  local attachment="$4"
  local attachment_name="$(basename "$attachment" | sed 's/\.[^.]*$//')"
  local html="$5"

  if [[ -n $attachment ]]; then
    if [[ $(whoami) == 'root' ]] || [[ $(whoami) == 'sbx_'* ]]; then
      encoded_attachment="$(base64 -w 0 "$attachment")"
    elif [[ $(whoami) == 'skilbjo' ]]; then
      encoded_attachment="$(gbase64 -w 0 "$attachment")"
    fi
  fi

  if [[ -n $html ]]; then
    csv_to_html "$attachment" >"${tmp_dir}/${attachment_name}.html"
    body="$(echo "$body"): "$(cat "$(echo "${tmp_dir}/${attachment_name}.html" | sed 's/\.[^.]*$//')".html | sed 's/\"//g' | tr -d "\n\r")""
  fi

  if [[ -z $attachment ]]; then
  local mime_email="$(echo "From: ${email}
To: ${distro_list}
Subject: ${subject}
MIME-Version: 1.0
Content-Type: text/html;

${body}")"
    else
    local mime_email="$(echo "From: ${email}
To: ${distro_list}
Subject: ${subject}
MIME-Version: 1.0
Content-Type: Multipart/Mixed; boundary=\"NextPart\"

--NextPart
Content-Type: text/html;

${body}

--NextPart
Content-Type: text/csv;
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename=\"${attachment}\"
${encoded_attachment}
--NextPart--")"
  fi

  echo "$mime_email"
}

aws_ses(){
  local distro_list="$1"
  local subject="$2"
  local body="$3"
  local attachment="$4"
  local html="$5"

  local msg="$(create_mime_email "$distro_list" "$subject" "$body" "$attachment" "$html")"

  jq -n --arg data "$msg" '{Data: $data}' >"${tmp_dir}/email.json"

  if [[ $(whoami) == 'root' ]]; then
    aws ses \
      send-raw-email \
      --region us-east-1 \
      --raw-message "file://${tmp_dir}/email.json"
  elif [[ $(whoami) == 'sbx_'* ]]; then
    # Query rsults with lines longer than 8 fail on AWS Lambda
    # --raw-message "fileb://" results in
    #   "'in <string>' requires string as left operand, not int"
    # mutt also fails, with 'Couldn't lock /sent' and
    #   '241 Segmentation fault (core dumped) | mutt -e 'set content_type=text/html' -s "Iris report for $report on $(date +%F)" -a "/tmp/${report}.csv" -- "$distro_list"'
    aws ses \
      send-raw-email \
      --region us-east-1 \
      --raw-message "file://${tmp_dir}/email.json"
  elif [[ $(whoami) == 'skilbjo' ]]; then
    aws ses \
      send-raw-email \
      --profile personal \
      --region us-east-1 \
      --raw-message "file://${tmp_dir}/email.json"
  else
    >&2 echo "user is: $(whoami), add to setup fn"
  fi
}

curl_email(){
  local distro_list="$1"
  local subject="$2"
  local body="$3"
  local attachment="$4"
  local html="$5"

  local msg="$(create_mime_email "$distro_list" "$subject" "$body" "$attachment" "$html")"

  echo "$msg" >"${tmp_dir}/email.txt"

  curl \
    --retry 3 \
    --insecure \
    --ssl-reqd \
    --url 'smtps://smtp.gmail.com:465' \
    --mail-from "$email" \
    --mail-rcpt "$distro_list" \
    --user "${email}:${email_pw}" \
    --upload-file "${tmp_dir}/email.txt"
  sleep 2
}

mutt_email() {
  local distro_list="$1"
  local subject="$2"
  local body="$3"
  local attachment="$4"
  local html="$5"

  local msg="$(create_mime_email "$distro_list" "$subject" "$body" "$attachment" "$html")"

  if [[ -n $html ]]; then
    body="$(echo "$body"): "$(cat "$(echo "$attachment" | sed 's/\.[^.]*$//')".html | sed 's/\"//g' | tr -d "\n\r")""
  fi

  if [[ -n $attachment ]]; then
    echo "$body" | \
      mutt -e 'set content_type=text/html' \
        -s "$subject" \
        -- "$distro_list"
  else
    if [[ $(whoami) == 'root' ]] || [[ $(whoami) == 'sbx_'* ]]; then
      encoded_attachment="$(base64 -w 0 "$attachment")"
    elif [[ $(whoami) == 'skilbjo' ]]; then
      encoded_attachment="$(gbase64 -w 0 "$attachment")"
    fi

    echo "$body" | \
      mutt -e 'set content_type=text/html' \
        -s "$subject" \
        -a "$attachment" \
        -- "$distro_list"
  fi

  sleep 2
}

email(){
  local distro_list="$1"
  local subject="$2"
  local body="$3"
  local attachment="$4"
  local html="$5"

  if [[ $(whoami) == 'root' ]]; then      # Docker
    curl_email "$distro_list" "$subject" "$body" "$attachment" "$html"
  elif [[ $(whoami) == 'sbx_'* ]]; then   # AWS Lambda
    set +u; echo "in lambda, in email script, email var is $email , _email var is $_email"; set -u
    email="${_email}"
    export email="${_email:-$email}"         # needed, for some reason udocker can't use the "email" in the --env="email" call
    curl_email "$distro_list" "$subject" "$body" "$attachment" "$html"
  elif [[ $(whoami) == 'skilbjo' ]]; then # macOS
    curl_email "$distro_list" "$subject" "$body" "$attachment" "$html"
  fi

  email_cleanup
}

email "$distro_list" "$subject" "$body" "$attachment" "$html"
